{
    "name": "Carrion",
    "scopeName": "source.carrion",
    "fileTypes": ["crl"],
    "patterns": [
        {"include": "#comments"},
        {"include": "#strings"},
        {"include": "#numbers"},
        {"include": "#keywords"},
        {"include": "#builtins"},
        {"include": "#operators"},
        {"include": "#functions"},
        {"include": "#grimoires"},
        {"include": "#variables"}
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.hash.carrion",
                    "match": "#.*$"
                },
                {
                    "name": "comment.block.carrion",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "comment.block.triple-backtick.carrion",
                    "begin": "```",
                    "end": "```"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.carrion",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.carrion",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.carrion",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.carrion",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.interpolated.carrion",
                    "begin": "f\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.carrion",
                            "match": "\\\\."
                        },
                        {
                            "name": "variable.other.interpolation.carrion",
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [{"include": "$self"}]
                        }
                    ]
                },
                {
                    "name": "string.interpolated.carrion",
                    "begin": "i\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.carrion",
                            "match": "\\\\."
                        },
                        {
                            "name": "variable.other.interpolation.carrion",
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "patterns": [{"include": "$self"}]
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.carrion",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.numeric.integer.carrion",
                    "match": "\\b\\d+\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.carrion",
                    "match": "\\b(if|else|otherwise|for|in|while|stop|skip|return|match|case|attempt|resolve|ensnare|raise|check)\\b"
                },
                {
                    "name": "keyword.declaration.carrion",
                    "match": "\\b(spell|grim|arcane|arcanespell|init)\\b"
                },
                {
                    "name": "keyword.operator.logical.carrion",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "keyword.other.carrion",
                    "match": "\\b(import|as|super|self)\\b"
                },
                {
                    "name": "constant.language.carrion",
                    "match": "\\b(True|False|None)\\b"
                }
            ]
        },
        "builtins": {
            "patterns": [
                {
                    "name": "support.function.builtin.carrion",
                    "match": "\\b(print|input|len|type|int|float|str|enumerate|help|version|modules)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.carrion",
                    "match": "\\+|\\-|\\*|\\/|\\%|\\*\\*"
                },
                {
                    "name": "keyword.operator.comparison.carrion",
                    "match": "==|!=|<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.assignment.carrion",
                    "match": "\\+=|\\-=|\\*=|\\/=|="
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.carrion",
                    "match": "\\b(spell)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {"name": "keyword.declaration.function.carrion"},
                        "2": {"name": "entity.name.function.carrion"}
                    }
                },
                {
                    "name": "meta.function-call.carrion",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {"name": "entity.name.function.carrion"}
                    }
                }
            ]
        },
        "grimoires": {
            "patterns": [
                {
                    "name": "entity.name.class.carrion",
                    "match": "\\b(grim|arcane\\s+grim)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {"name": "keyword.declaration.class.carrion"},
                        "2": {"name": "entity.name.class.carrion"}
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.language.carrion",
                    "match": "\\bself\\b"
                },
                {
                    "name": "variable.other.carrion",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}